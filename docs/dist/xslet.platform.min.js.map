{"version":3,"sources":["xslet.platform.js"],"names":["xslet","definePlatform","window","userAgent","navigator","toUpperCase","htmlTag","document","getElementsByTagName","ua","detectUA","os","detectOS","setClassToHtmlTag","Object","defineProperty","enumerable","value","platform","uaName","uaVersion","compareVersions","osName","osVersion","useragent","version","candids","indexOf","getVersion","setNameAndVersion","key","num","index","str","slice","length","replace","i","result","exec","obj","name","NaN","arr1","split","map","toInteger","arr2","n","v","parseInt","cls","className","String","IOS"],"mappings":"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","file":"xslet.platform.min.js","sourcesContent":["/*!\n * Copyright (C) 2016 xslet project.\n * This software is released under the MIT license.\n */\n\n/**\n * Is the top namespace of all xslet modules.\n *\n * @namespace xslet\n * @global\n */\n;xslet = (typeof xslet === 'undefined') ? {} : xslet;\n\n(function(){\n  'use strict';\n  definePlatform(xslet, window);\n\n\n/**\n * Defines `xslet.platform` namespace.\n *\n * @param xslet {object} - `xslet` namespace object.\n * @param window {Window} - A Window object in DOM.\n */\nfunction definePlatform(xslet, window) {\n  var userAgent = window.navigator.userAgent.toUpperCase();\n  var htmlTag = window.document.getElementsByTagName('html')[0];\n\n  var ua = detectUA(userAgent);\n  var os = detectOS(userAgent);\n\n  setClassToHtmlTag(htmlTag, ua, os);\n\n  /**\n   * Is the namespace for runtime platform informations.\n   *\n   * @namespace xslet.platform\n   */\n  Object.defineProperty(xslet, 'platform', {\n    enumerable: true,\n    value: {},\n  });\n\n  /**\n   * Provides the browser informations.\n   *\n   * @namespace xslet.platform.ua\n   * @prop name    {string} - The browser name in upper case characters.\n   * @prop version {string} - The version number of the browser.\n   * @prop FIREFOX {boolean} - true, if the browser is Firefox.\n   * @prop CHROME  {boolean} - true, if the browser is Chrome.\n   * @prop EDGE    {boolean} - true, if the browser is Edge.\n   * @prop MSIE    {boolean} - true, if the browser is IE.\n   * @prop SAFARI  {boolean} - true, if the browser is Safari.\n   * @prop VIVALDI {boolean} - true, if the browser is Vivaldi.\n   * @prop OPERA   {boolean} - true, if the browser is Opera.\n   * @prop UNKNOWN {boolean} - true, if the browser is unknown.\n   */\n  Object.defineProperty(xslet.platform, 'ua', {\n    enumerable: true,\n    value: ua,\n  });\n\n  /**\n   * Provides the OS informations.\n   *\n   * @namespace xslet.platform.os\n   * @prop name    {string} - The OS name by upper case characters.\n   * @prop version {string} - The version number of the OS.\n   * @prop LINUX   {boolean} - true, if the OS is Linux.\n   * @prop WINNT   {boolean} - true, if the OS is Windows NT.\n   * @prop MACOS   {boolean} - true, if the OS is macOS.\n   * @prop ANDROID {boolean} - true, if the OS is Android.\n   * @prop IOS     {boolean} - true, if the OS is iOS.\n   * @prop IPHONE  {boolean} - true, if the hardware is iPhone.\n   * @prop IPAD    {boolean} - true, if the hardware is iPad\n   * @prop IPOD    {boolean} - true, if the hardware is iPod.\n   * @prop UNKNOWN {boolean} - true, if the OS is unknown.\n   */\n  Object.defineProperty(xslet.platform, 'os', {\n    enumerable: true,\n    value: os,\n  });\n\n  /**\n   * Returns true if the browser is less than the specified version.\n   *\n   * @method xslet.platform.ua.lt\n   * @param uaName    {string} - The browser name to be compared.\n   * @param uaVersion {string} - The browser version to be compared.\n   * @return {boolean} true if the browser is less than the specified version.\n   */\n  Object.defineProperty(xslet.platform.ua, 'lt', {\n    enumerable: true,\n    value: function(uaName, uaVersion) {\n      return compareVersions(xslet.platform.ua, uaName, uaVersion) < 0;\n    },\n  });\n\n  /**\n   * Returns true if the browser is less than or equal to the specified\n   * version.\n   *\n   * @method xslet.platform.ua.lte\n   * @param uaName    {string} - The browser name to be compared.\n   * @param uaVersion {string} - The browser version to be compared.\n   * @return {boolean} true if the browser is less than or equal to the\n   *   specified version.\n   */\n  Object.defineProperty(xslet.platform.ua, 'lte', {\n    enumerable: true,\n    value: function(uaName, uaVersion) {\n      return compareVersions(xslet.platform.ua, uaName, uaVersion) <= 0;\n    },\n  });\n\n  /**\n   * Returns true if the browser is greater than the specified version.\n   *\n   * @method xslet.platform.ua.gt\n   * @param uaName    {string} - The browser name to be compared.\n   * @param uaVersion {string} - The browser version to be compared.\n   * @return {boolean} true if the browser is greater than the specified\n   *   version.\n   */\n  Object.defineProperty(xslet.platform.ua, 'gt', {\n    enumerable: true,\n    value: function(uaName, uaVersion) {\n      return compareVersions(xslet.platform.ua, uaName, uaVersion) > 0;\n    },\n  });\n\n  /**\n   * Returns true if the browser is greater than or equal to the specified\n   * version.\n   *\n   * @method xslet.platform.ua.gte\n   * @param uaName    {string} - The browser name to be compared.\n   * @param uaVersion {string} - The browser version to be compared.\n   * @return {boolean} true if the browser is greater than or equal to the\n   *   specified version.\n   */\n  Object.defineProperty(xslet.platform.ua, 'gte', {\n    enumerable: true,\n    value: function(uaName, uaVersion) {\n      return compareVersions(xslet.platform.ua, uaName, uaVersion) >= 0;\n    },\n  });\n\n  /**\n   * Returns true if the browser is equal to the specified version.\n   *\n   * @method xslet.platform.ua.eq\n   * @param uaName    {string} - The browser name to be compared.\n   * @param uaVersion {string} - The browser version to be compared.\n   * @return {boolean} true if the browser is equal to the specified version.\n   */\n  Object.defineProperty(xslet.platform.ua, 'eq', {\n    enumerable: true,\n    value: function(uaName, uaVersion) {\n      return compareVersions(xslet.platform.ua, uaName, uaVersion) === 0;\n    },\n  });\n\n  /**\n   * Returns true if the browser is not equal to the specified version.\n   *\n   * @method xslet.platform.ua.ne\n   * @param uaName    {string} - The browser name to be compared.\n   * @param uaVersion {string} - The browser version to be compared.\n   * @return {boolean} true if the browser is not equal to the specified\n   *   version.\n   */\n  Object.defineProperty(xslet.platform.ua, 'ne', {\n    enumerable: true,\n    value: function(uaName, uaVersion) {\n      return compareVersions(xslet.platform.ua, uaName, uaVersion) !== 0;\n    },\n  });\n\n  /**\n   * Returns true if the OS is less than the specified version.\n   *\n   * @method xslet.platform.os.lt\n   * @param osName    {string} - The OS name to be compared.\n   * @param osVersion {string} - The OS version to be compared.\n   * @return {boolean} true if the OS is less than the specified version.\n   */\n  Object.defineProperty(xslet.platform.os, 'lt', {\n    enumerable: true,\n    value: function(osName, osVersion) {\n      return compareVersions(xslet.platform.os, osName, osVersion) < 0;\n    },\n  });\n\n  /**\n   * Returns true if the OS is less than or equal to the specified version.\n   *\n   * @method xslet.platform.os.lte\n   * @param osName    {string} - The OS name to be compared.\n   * @param osVersion {string} - The OS version to be compared.\n   * @return {boolean} true if the OS is less than or equal to the specified\n   *   version.\n   */\n  Object.defineProperty(xslet.platform.os, 'lte', {\n    enumerable: true,\n    value: function(osName, osVersion) {\n      return compareVersions(xslet.platform.os, osName, osVersion) <= 0;\n    },\n  });\n\n  /**\n   * Returns true if the OS is greater than the specified version.\n   *\n   * @method xslet.platform.os.gt\n   * @param osName    {string} - The OS name to be compared.\n   * @param osVersion {string} - The OS version to be compared.\n   * @return {boolean} true if the OS is greater than the specified version.\n   */\n  Object.defineProperty(xslet.platform.os, 'gt', {\n    enumerable: true,\n    value: function(osName, osVersion) {\n      return compareVersions(xslet.platform.os, osName, osVersion) > 0;\n    },\n  });\n\n  /**\n   * Returns true if the OS is greater than or equal to the specified\n   * version.\n   *\n   * @method xslet.platform.os.gte\n   * @param osName    {string} - The OS name to be compared.\n   * @param osVersion {string} - The OS version to be compared.\n   * @return {boolean} true if the OS is greater than or equal to the\n   *   specified version.\n   */\n  Object.defineProperty(xslet.platform.os, 'gte', {\n    enumerable: true,\n    value: function(osName, osVersion) {\n      return compareVersions(xslet.platform.os, osName, osVersion) >= 0;\n    },\n  });\n\n  /**\n   * Returns true if the OS is equal to the specified version.\n   *\n   * @method xslet.platform.os.eq\n   * @param osName    {string} - The OS name to be compared.\n   * @param osVersion {string} - The OS version to be compared.\n   * @return {boolean} true if the OS is equal to the specified version.\n   */\n  Object.defineProperty(xslet.platform.os, 'eq', {\n    enumerable: true,\n    value: function(osName, osVersion) {\n      return compareVersions(xslet.platform.os, osName, osVersion) === 0;\n    },\n  });\n\n  /**\n   * Returns true if the OS is not equal to the specified version.\n   *\n   * @method xslet.platform.os.ne\n   * @param osName    {string} - The OS name to be compared.\n   * @param osVersion {string} - The OS version to be compared.\n   * @return {boolean} true if the OS is not equal to the specified version.\n   */\n  Object.defineProperty(xslet.platform.os, 'ne', {\n    enumerable: true,\n    value: function(osName, osVersion) {\n      return !(compareVersions(xslet.platform.os, osName, osVersion) === 0);\n    },\n  });\n}\n\n\n/**\n * Parses the user agent string which is converted to upper case and gets\n * the browser informations.\n *\n * @private\n * @param useragent {string} - The user agent string which is converted to\n *   upper case.\n * @return {object} An object which has the name and the version of the\n *   browser.\n */\nfunction detectUA(useragent) {\n  var ua = {},\n      version,\n      candids = [\n        'FIREFOX',\n        'CHROME',\n        'EDGE',\n        'MSIE',\n        'SAFARI',\n        'OPERA',\n        'VIVALDI',\n        'UNKNOWN',\n      ];\n\n  if (useragent.indexOf('OPERA') >= 0) {\n    version = getVersion(useragent, 'VERSION');\n    setNameAndVersion(ua, candids, 'OPERA', version);\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'OPR'))) {\n    setNameAndVersion(ua, candids, 'OPERA', version);\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'OPIOS'))) {\n    setNameAndVersion(ua, candids, 'OPERA', version);\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'EDGE'))) {\n    setNameAndVersion(ua, candids, 'EDGE', version);\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'MSIE'))) {\n    setNameAndVersion(ua, candids, 'MSIE', version);\n    return ua;\n  }\n\n  if (useragent.indexOf('TRIDENT') >= 0) {\n    setNameAndVersion(ua, candids, 'MSIE', getVersion(useragent, 'RV'));\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'VIVALDI'))) {\n    setNameAndVersion(ua, candids, 'VIVALDI', version);\n    return ua;\n  }\n\n  if (useragent.indexOf('FXIOS') >= 0) {\n    setNameAndVersion(ua, candids, 'FIREFOX', '');\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'CHROME'))) {\n    setNameAndVersion(ua, candids, 'CHROME', version);\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'CRIOS'))) {\n    setNameAndVersion(ua, candids, 'CHROME', version);\n    return ua;\n  }\n\n  if (useragent.indexOf('SAFARI') >= 0) {\n    setNameAndVersion(ua, candids, 'SAFARI', getVersion(useragent, 'VERSION'));\n    return ua;\n  }\n\n  if ((version = getVersion(useragent, 'FIREFOX'))) {\n    setNameAndVersion(ua, candids, 'FIREFOX', version);\n    return ua;\n  }\n\n  setNameAndVersion(ua, candids, 'UNKNOWN', '');\n  return ua;\n}\n\n\n/**\n * Parses the user agent string which is converted to upper case and gets\n * the OS informations.\n *\n * @private\n * @param useragent {string} - The user agent string which is converted to\n *   upper case.\n * @return {object} An object which has the name and the version of the\n *   browser.\n */\nfunction detectOS(useragent) {\n  var os = {},\n      version,\n      candids = [\n        'IPOD',\n        'IPAD',\n        'IPHONE',\n        'ANDROID',\n        'WINNT',\n        'MACOS',\n        'LINUX',\n        'UNKNOWN',\n      ];\n\n  if (useragent.indexOf('IPOD') >= 0) {\n    version = getVersion(useragent, 'IPHONE OS', 2);\n    setNameAndVersion(os, candids, 'IPOD', version);\n    Object.defineProperty(os, 'IOS', { enumerable: true, value: true });\n    return os;\n  }\n\n  if (useragent.indexOf('IPAD') >= 0) {\n    version = getVersion(useragent, 'IPHONE OS', 2);\n    if (!version) {\n      version = getVersion(useragent, 'CPU OS', 2);\n    }\n    setNameAndVersion(os, candids, 'IPAD', version);\n    Object.defineProperty(os, 'IOS', { enumerable: true, value: true });\n    return os;\n  }\n\n  if (useragent.indexOf('IPHONE') >= 0) {\n    version = getVersion(useragent, 'IPHONE OS', 2);\n    setNameAndVersion(os, candids, 'IPHONE', version);\n    Object.defineProperty(os, 'IOS', { enumerable: true, value: true });\n    return os;\n  }\n\n  if ((version = getVersion(useragent, 'ANDROID', 2))) {\n    setNameAndVersion(os, candids, 'ANDROID', version);\n    Object.defineProperty(os, 'IOS', { enumerable: true, value: false });\n    return os;\n  }\n\n  if ((version = getVersion(useragent, 'WINDOWS', 2))) {\n    setNameAndVersion(os, candids, 'WINNT', version);\n    Object.defineProperty(os, 'IOS', { enumerable: true, value: false });\n    return os;\n  }\n\n  if ((version = getVersion(useragent, 'MAC OS X', 2))) {\n    setNameAndVersion(os, candids, 'MACOS', version);\n    Object.defineProperty(os, 'IOS', { enumerable: true, value: false });\n    return os;\n  }\n\n  if (useragent.indexOf('LINUX') >= 0) {\n    setNameAndVersion(os, candids, 'LINUX', '');\n    Object.defineProperty(os, 'IOS', { enumerable: true, value: false });\n    return os;\n  }\n\n  setNameAndVersion(os, candids, 'UNKNOWN', '');\n  Object.defineProperty(os, 'IOS', { enumerable: true, value: false });\n  return os;\n}\n\n\n/**\n * Gets version number string from user agent string in upper case.\n *\n * @private\n * @param useragent {string} - The user agent string in upper case.\n * @param key {string} - The string which takes place before the version\n *   number string.\n * @param num {number} - The getting count of version number splitted by dots.\n * @return {string} The version number string which concatenates natural\n *   numbers with dots.\n */\nfunction getVersion(useragent, key, num) {\n  num = num || 1;\n  var index = useragent.indexOf(key);\n  if (index < 0) {\n    return '';\n  }\n\n  var str = useragent.slice(index + key.length);\n  str = str.replace(/[^0-9]*/, '');\n\n  var version = '';\n  for (var i = 0; i < num; i++) {\n    var result = /[^0-9]/.exec(str);\n    if (result && result.index > 0) {\n      version += '.' + str.slice(0, result.index);\n      str = str.slice(result.index + 1);\n    }\n  }\n\n  return version.slice(1);\n}\n\n\n/**\n * Compares the name and version in the specified object to the name and the\n * version specified as the second and third arguments.\n *\n * The version strings are strings which concatenate natural numbers with dots.\n * (ex. '4', '1.23.5').\n *\n * @private\n * @param obj {object} - An object which has `name` property and `version`\n *   property.\n * @param name {string} - A name string.\n * @param version (string} - A version string.\n */\nfunction compareVersions(obj, name, version) {\n  if (obj.name !== name || obj.name === 'UNKNOWN') {\n    return NaN;\n  }\n\n  var arr1 = obj.version.split('.').map(toInteger);\n  var arr2 = version.split('.').map(toInteger);\n\n  for (var i = 0, n = arr1.length; i < n; i++) {\n    if (arr2[i] == null) {\n      return 1;\n    }\n\n    if (arr1[i] < arr2[i]) {\n      return -1;\n    }\n\n    if (arr1[i] > arr2[i]) {\n      return 1;\n    }\n  }\n\n  if (arr1.length < arr2.length) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction toInteger(v) {\n  return parseInt(v);\n}\n\n\n/**\n * Sets the name, the version and boolean flags of candidate names to the\n * object.\n *\n * The flags of candidate names are setted true if the name equals the name\n * of the 3rd argument and false otherwise.\n *\n * @private\n * @param obj {object} - An object\n * @param candids {Array<string>} - a string array of candidate names.\n * @param name {string} - A name.\n * @param version {string} - A version string.\n */\nfunction setNameAndVersion(obj, candids, name, version) {\n  Object.defineProperty(obj, 'name', { enumerable: true, value: name });\n  Object.defineProperty(obj, 'version', { enumerable: true, value: version });\n\n  Object.defineProperty(obj, name, { enumerable: true, value: true });\n\n  for (var i = 0, n = candids.length; i < n; i++) {\n    if (candids[i] === name) {\n      continue;\n    }\n    Object.defineProperty(obj, candids[i], { enumerable: true, value: false });\n  }\n}\n\n\n/**\n * Sets user agent informations to class attribute of HTML tag.\n *\n * @private\n * @param htmlTag {HTMLElement} - The HTML tag.\n * @param ua {object} - An object which has the browser informations.\n * @param os {object} - An object which has the OS informations.\n */\nfunction setClassToHtmlTag(htmlTag, ua, os) {\n  var cls = htmlTag.className || '';\n  if (cls) {\n    cls += ' ';\n  }\n\n  cls += ua.name;\n  if (ua.version) {\n    cls += ' ' + ua.name + '-' + String(ua.version).replace(/\\./, '_');\n  }\n\n  cls += ' ' + os.name;\n  if (os.version) {\n    cls += ' ' + os.name + '-' + String(os.version).replace(/\\./, '_');\n  }\n  if (os.IOS) {\n    cls += ' IOS';\n  }\n\n  htmlTag.className = cls;\n}\n\n}());\n"]}